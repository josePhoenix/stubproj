#!/bin/bash
set -euo pipefail

# Answer to "Can a Bash script tell what directory it's stored in?"
# http://stackoverflow.com/a/246128/421355

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

function show_usage() {
    echo "stubproj PROJ_DIR PROJ_NAME PORT"
    echo
    echo "Example:"
    echo "stubproj /grp/jwst/myfolder newproj 9900"
}

if [ "$#" -ne 3 ]; then
    show_usage
    exit 1
fi

if [ -z $(which conda) ]; then
    echo "Install conda first: http://conda.pydata.org/miniconda.html"
    exit 1
fi

PROJ_DIR="$1"
PROJ_NAME=$2
PORT=$3

# Setting up a computing environment on a remote server
mkdir -p "$PROJ_DIR"
for subdir in data notebooks output scratch; do
    mkdir -p "$PROJ_DIR/$subdir"
done

mkdir -p ~/workspace
ln -sv "$PROJ_DIR" ~/workspace/"$PROJ_NAME"
cp -R "$DIR/../skel/"* "$PROJ_DIR/"

# move into directory
cd "$PROJ_DIR"

conda create -n $PROJ_NAME --yes --file "./conda_requirements.txt"
conda run -n $PROJ_NAME -- python3 "./populate_jupyter_notebook_config.py" $PORT
rm ./populate_jupyter_notebook_config.py
git init .

echo "Okay, all set in $PROJ_DIR"
echo "Appending a line to ~/.stubproj_list"
echo "$PROJ_NAME $(hostname) $PORT" >> ~/.stubproj_list
echo
echo "Add this line to ~/.stubproj_list on machines where you want to connect to this environment:"
echo
echo "$PROJ_NAME $(hostname) $PORT"
echo
echo "If you haven't set up the shell aliases for this (remote) machine, add them to your bash startup files:"
echo
echo "echo \"source $DIR/remote-aliases.sh\" >> ~/.bashrc"
echo
echo "If you haven't set up the shell aliases for your (local) machine, add them to your bash startup files:"
echo
cat "$DIR/local-aliases.sh"
echo
echo "Done!"

# create conda env
# install jupyter notebook, ipywidgets, astropy
# (is there something like requirements.txt?)
# notebooks/
# data/
# output/
# scratch/
#
# create password and cert
#
# proj_go
# proj_nb
#
# shell alias - on server
#    source activate envname
#    cd proj root
#    pid = `cat $PROJDIR/notebook.pid`
#    if [ ! -e /proc/$pid -a /proc/$pid/exe ]; then
#       /do/thing.py &
#       echo $! > $PROJDIR/notebook.pid
#    else
#
#
# shell alias - local
#    (sleep 1; open http://host:port/) & ssh remotehost "go_lsst"